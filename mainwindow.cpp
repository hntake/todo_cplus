#include "mainwindow.h"
#include <QInputDialog>
#include <QDateTimeEdit>
#include <QMessageBox>
#include <QTimer>
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlError>
#include <QScrollArea>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), centralWidget(new QWidget(this)), mainLayout(new QVBoxLayout)
{
    setCentralWidget(centralWidget);
    centralWidget->setLayout(mainLayout);


    //„Çø„Ç∞„Éï„Ç£„É´„Çø„Éº
    tagFilterComboBox = new QComboBox(this);

    tagFilterComboBox->addItem("„Åô„Åπ„Å¶„ÅÆ„Çø„Ç∞");  // ÂÖ®‰ª∂Ë°®Á§∫
    populateTagComboBox();  // „Çø„Ç∞‰∏ÄË¶ß„ÇíÂèñÂæó
    connect(tagFilterComboBox, &QComboBox::currentTextChanged, this, &MainWindow::updateTaskList);

    mainLayout->addWidget(tagFilterComboBox);

    // taskListLayout „ÇíÂàùÊúüÂåñÔºà1Âõû„Å†„ÅëÔºâ
    taskListLayout = new QVBoxLayout();

    // ‰∏¶„Å≥Êõø„ÅàÁî®„ÅÆ„Ç≥„É≥„Éú„Éú„ÉÉ„ÇØ„Çπ„ÇíËøΩÂä†
    QComboBox *sortComboBox = new QComboBox(this);
    sortComboBox->addItem("„Çø„Çπ„ÇØÂêç„Åß‰∏¶„Å≥Êõø„Åà");
    sortComboBox->addItem("Á∑†ÂàáÊó•„Åß‰∏¶„Å≥Êõø„Åà");
    sortComboBox->addItem("„Çø„Ç∞„Åß‰∏¶„Å≥Êõø„Åà");
    mainLayout->addWidget(sortComboBox);

    // ‰∏¶„Å≥Êõø„Åà„ÅÆÈÅ∏ÊäûÂ§âÊõ¥„ÇíÊé•Á∂ö
    connect(sortComboBox, &QComboBox::currentTextChanged, this, &MainWindow::sortTaskList);

    // „Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆÂàùÊúüÂåñ
    initializeDatabase();
    // üîÑ „Ç¢„Éó„É™Ëµ∑ÂãïÊôÇ„Å´„Çø„Çπ„ÇØ‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
    updateTaskList();  // „Åì„Åì„ÅßÊó¢Â≠ò„ÅÆ„Çø„Çπ„ÇØ„ÇíË™≠„ÅøËæº„ÇÄ
    setupTaskTable();
    tableView->setVisible(false);



    QSqlQuery query;
    query.exec("ALTER TABLE tasks ADD COLUMN is_completed INTEGER DEFAULT 0;");

    while (query.next()) {
        QString taskName = query.value(1).toString();  // „Çø„Çπ„ÇØÂêç
        QString taskDeadline = query.value(2).toString();  // Á∑†Âàá
        QString taskTag = query.value(3).toString();  // „Çø„Ç∞
        QLabel *taskLabel = new QLabel(taskName + " (" + taskTag + " - " + taskDeadline + ")", this);

        QDateTime deadlineDateTime = QDateTime::fromString(taskDeadline, "yyyy-MM-dd HH:mm:ss");
        if (deadlineDateTime < QDateTime::currentDateTime())  {
            taskLabel->setStyleSheet("color: red; font-weight: bold;");
        }
    }

    // +„Éú„Çø„É≥
    addInitialButton = new QPushButton("+", this);
    mainLayout->addWidget(addInitialButton);
    connect(addInitialButton, &QPushButton::clicked, this, &MainWindow::showInputFields);

    // „Çø„Çπ„ÇØÂÖ•Âäõ„Ç®„É™„Ç¢ÔºàÊúÄÂàù„ÅØÈùûË°®Á§∫Ôºâ
    taskInputArea = new QWidget(this);
    tagInput = new QLineEdit(this);  // „Çø„Ç∞ÂÖ•ÂäõÁî®„ÅÆ QLineEdit „ÇíËøΩÂä†
    tagInput->setPlaceholderText("„Çø„Ç∞„ÇíÂÖ•Âäõ (‰æã: ‰ªï‰∫ã, ÂÆ∂‰∫ã)");

    QHBoxLayout *inputLayout = new QHBoxLayout(taskInputArea);
    taskInput = new QLineEdit(this);
    deadlineInput = new QDateTimeEdit(QDateTime::currentDateTime(), this);
    deadlineInput->setCalendarPopup(true);
    addTaskButton = new QPushButton("ËøΩÂä†", this);

    inputLayout->addWidget(taskInput);
    inputLayout->addWidget(tagInput);  // „Çø„Ç∞ÂÖ•Âäõ„Ç®„É™„Ç¢„ÇíËøΩÂä†
    inputLayout->addWidget(addTaskButton);
    taskInputArea->setLayout(inputLayout);
    taskInputArea->hide();

    mainLayout->addWidget(taskInputArea);
    connect(addTaskButton, &QPushButton::clicked, this, &MainWindow::addTask);

    // taskListLayout „ÇíÂàùÊúüÂåñ„Åó„ÅüÂæå„ÄÅQScrollArea „Çí‰ΩúÊàê
    QWidget *container = new QWidget();
    container->setLayout(taskListLayout);
    QScrollArea *scrollArea = new QScrollArea(this);
    scrollArea->setWidget(container);
    scrollArea->setWidgetResizable(true);

    // mainLayout „Å´ scrollArea „ÇíËøΩÂä†
    mainLayout->addWidget(scrollArea);

    // „É™„Éû„Ç§„É≥„ÉÄ„ÉºÁî®„ÅÆ„Çø„Ç§„Éû„Éº
    reminderTimer = new QTimer(this);
    connect(reminderTimer, &QTimer::timeout, this, &MainWindow::checkReminders);
    reminderTimer->start(60000); // 1ÂàÜ„Åî„Å®„Å´„ÉÅ„Çß„ÉÉ„ÇØ



    // QSS („Çπ„Çø„Ç§„É´„Ç∑„Éº„Éà) „ÅÆË®≠ÂÆö
    this->setStyleSheet(
        "QWidget {"
        "  background-color: #f0f0f0;"
        "}"
        "QLineEdit {"
        "  border: 2px solid #bdc3c7;"
        "  border-radius: 6px;"
        "  padding: 6px;"
        "  font-size: 14px;"
        "}"
        "QPushButton {"
        "  background-color: #3498db;"
        "  color: white;"
        "  border-radius: 8px;"
        "  padding: 8px 16px;"
        "  font-size: 16px;"
        "}"
        "QPushButton:hover {"
        "  background-color: #2980b9;"
        "}"
        );
}

MainWindow::~MainWindow() {

}

void MainWindow::showInputFields() {
    addInitialButton->hide();  // +„Éú„Çø„É≥„ÇíÈùûË°®Á§∫
    taskInputArea->show();     // ÂÖ•Âäõ„Ç®„É™„Ç¢„ÇíË°®Á§∫
}

void MainWindow::addTask() {
    QSqlQuery query;

    QString taskText = taskInput->text().trimmed();
    QString tagText = tagInput->text().trimmed();
    QDateTime deadline = deadlineInput->dateTime();

    while (query.next()) {
        int taskId = query.value(0).toInt();  // „Çø„Çπ„ÇØID
        QString taskName = query.value(1).toString();  // „Çø„Çπ„ÇØÂêç
        QString taskDeadline = query.value(2).toString();  // Á∑†Âàá
        QString taskTag = query.value(3).toString();  // „Çø„Ç∞



        QLabel *taskLabel = new QLabel(taskName + " (" + taskTag + " - " + taskDeadline + ")", this);
        QDateTime deadlineDateTime = QDateTime::fromString(taskDeadline, "yyyy-MM-dd HH:mm:ss");
        if (deadlineDateTime < QDateTime::currentDateTime())  {
            taskLabel->setStyleSheet("color: red; font-weight: bold;");
        }
        QPushButton *editTaskButton = new QPushButton("Á∑®ÈõÜ", this);

        connect(editTaskButton, &QPushButton::clicked, this, [this, taskId, taskName, taskTag, taskDeadline]() {
            editTask(taskId, taskName, taskTag, taskDeadline);
        });

        QHBoxLayout *taskLayout = new QHBoxLayout();
        taskLayout->addWidget(taskLabel);
        taskLayout->addWidget(editTaskButton);

        QWidget *taskWidget = new QWidget();
        taskWidget->setLayout(taskLayout);
        taskListLayout->addWidget(taskWidget);
    }

    if (!taskText.isEmpty()) {
        int taskId = query.value(0).toInt();  // „Çø„Çπ„ÇØID
        QString taskName = query.value(1).toString();  // „Çø„Çπ„ÇØÂêç
        QString taskDeadline = query.value(2).toString();  // Á∑†Âàá
        QString taskTag = query.value(3).toString();  //„Çø„Ç∞
        saveTaskToDatabase(taskText, deadline, tagText); // „Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò

        qDebug() << "„Çø„Çπ„ÇØËøΩÂä†:" << taskText << deadline.toString("yyyy/MM/dd HH:mm") << tagText;


        // **Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„Çí„Åù„ÅÆÂ†¥„Åß„É™„Çπ„Éà„Å´ËøΩÂä†**
        QWidget *taskRow = new QWidget(this);
        QHBoxLayout *taskLayout = new QHBoxLayout(taskRow);

        QLabel *taskLabel = new QLabel(taskText + " (ÊúüÈôê: " + deadline.toString("yyyy/MM/dd HH:mm") + ")", this);
        QLabel *tagLabel = new QLabel(tagText.isEmpty() ? "„Å™„Åó" : tagText, this);
        tagLabel->setStyleSheet("color: #888; font-size: 12px;");

        QPushButton *editTaskButton = new QPushButton("Â§âÊõ¥", this);
        QPushButton *deleteTaskButton = new QPushButton("ÂâäÈô§", this);
        QPushButton *completeTaskButton = new QPushButton("ÂÆå‰∫Ü", this);

        taskLayout->addWidget(taskLabel);
        taskLayout->addWidget(tagLabel);
        taskLayout->addWidget(editTaskButton);
        taskLayout->addWidget(deleteTaskButton);
        taskLayout->addWidget(completeTaskButton);
        taskRow->setLayout(taskLayout);

        taskListLayout->addWidget(taskRow);

        connect(editTaskButton, &QPushButton::clicked, this, [this, taskId, taskName, taskTag, taskDeadline]() {
            editTask(taskId, taskName, taskTag, taskDeadline);
        });


        connect(deleteTaskButton, &QPushButton::clicked, [this, taskId,taskRow]() {
            deleteTask(taskId);   // taskRow „Åß„ÅØ„Å™„Åè taskId „ÇíÊ∏°„Åô
            taskRow->deleteLater();  // UI„Åã„ÇâÂâäÈô§
        });

        connect(completeTaskButton, &QPushButton::clicked, [this, taskId,taskRow]() {
            completeTask(taskId);   // taskRow „Åß„ÅØ„Å™„Åè taskId „ÇíÊ∏°„Åô
        });

        // Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÇíËøΩÂä†Âæå„ÄÅ„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
        updateTaskList();

        taskInput->clear();
        tagInput->clear();
    }



}

// **Â§âÊõ¥„Éú„Çø„É≥„ÅÆÂá¶ÁêÜ**
void MainWindow::editTask(int taskId, QString taskName, QString taskTag, QString taskDeadline) {
    QDialog dialog(this);
    dialog.setWindowTitle("„Çø„Çπ„ÇØÁ∑®ÈõÜ");

    QVBoxLayout layout(&dialog);

    QLineEdit taskInputEdit;
    taskInputEdit.setText(taskName);
    QLineEdit tagInputEdit;
    tagInputEdit.setText(taskTag);
    QDateTimeEdit deadlineInputEdit;
    deadlineInputEdit.setDateTime(QDateTime::fromString(taskDeadline, Qt::ISODate));

    QPushButton saveButton("‰øùÂ≠ò");
    QPushButton cancelButton("„Ç≠„É£„É≥„Çª„É´");

    layout.addWidget(new QLabel("„Çø„Çπ„ÇØÂêç:"));
    layout.addWidget(&taskInputEdit);
    layout.addWidget(new QLabel("„Çø„Ç∞:"));
    layout.addWidget(&tagInputEdit);
    layout.addWidget(new QLabel("ÊúüÈôê:"));
    layout.addWidget(&deadlineInputEdit);
    layout.addWidget(&saveButton);
    layout.addWidget(&cancelButton);

    connect(&saveButton, &QPushButton::clicked, [&]() {
        QString newTaskName = taskInputEdit.text();
        QString newTag = tagInputEdit.text();
        QString newDeadline = deadlineInputEdit.dateTime().toString(Qt::ISODate);

        QSqlQuery query;
        query.prepare("UPDATE tasks SET taskText = ?, tagText = ?, deadline = ? WHERE id = ?");
        query.addBindValue(newTaskName);
        query.addBindValue(newTag);
        query.addBindValue(newDeadline);
        query.addBindValue(taskId);

        if (!query.exec()) {
            qDebug() << "„Çø„Çπ„ÇØÁ∑®ÈõÜ„Ç®„É©„Éº:" << query.lastError().text();
            return;
        }

        qDebug() << "„Çø„Çπ„ÇØÁ∑®ÈõÜÊàêÂäü: ID =" << taskId;
        updateTaskList();  // Á∑®ÈõÜÂæå„Å´„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
        dialog.accept();
    });

    connect(&cancelButton, &QPushButton::clicked, &dialog, &QDialog::reject);

    dialog.exec();
}



// **ÂâäÈô§„Éú„Çø„É≥„ÅÆÂá¶ÁêÜ**
void MainWindow::deleteTask(int taskId) {
    QMessageBox::StandardButton reply;
    reply = QMessageBox::question(this, "ÂâäÈô§Á¢∫Ë™ç", "„Åì„ÅÆ„Çø„Çπ„ÇØ„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü",
                                  QMessageBox::Yes | QMessageBox::No);

    if (reply == QMessageBox::Yes) {
        QSqlQuery query;
        query.prepare("DELETE FROM tasks WHERE id = ?");
        query.addBindValue(taskId);

        if (!query.exec()) {
            qDebug() << "„Çø„Çπ„ÇØÂâäÈô§„Ç®„É©„Éº:" << query.lastError().text();
            return;
        }

        qDebug() << "„Çø„Çπ„ÇØÂâäÈô§ÊàêÂäü: ID =" << taskId;
        updateTaskList();  // ÂâäÈô§Âæå„ÄÅ„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
    }
}

// **ÂÆå‰∫Ü„Éú„Çø„É≥„ÅÆÂá¶ÁêÜ**
void MainWindow::completeTask(int taskId) {
    QSqlQuery query;
    query.prepare("UPDATE tasks SET is_completed = 1 WHERE id = :id");
    query.bindValue(":id", taskId);

    if (!query.exec()) {
        qDebug() << "„Çø„Çπ„ÇØÂÆå‰∫Ü„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:" << query.lastError().text();
        return;
    }

    qDebug() << "„Çø„Çπ„ÇØ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü: ID =" << taskId;

    updateTaskList();  // UI „ÇíÊõ¥Êñ∞
}


void MainWindow::checkReminders() {
    QDateTime now = QDateTime::currentDateTime();

    for (const auto &task : taskList) {
        if (task.deadline <= now.addSecs(60)) {  // ÊúüÈôê„Åå1ÂàÜ‰ª•ÂÜÖ
            QMessageBox::warning(this, "„É™„Éû„Ç§„É≥„ÉÄ„Éº", "„Çø„Çπ„ÇØÊúüÈôê„ÅåËøë„Å•„ÅÑ„Å¶„ÅÑ„Åæ„Åô: " + task.taskLabel->text());
        }
    }
}

void MainWindow::initializeDatabase() {
    QSqlDatabase db = QSqlDatabase::addDatabase("QSQLITE");
    db.setDatabaseName("tasks.db");  // „Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´Âêç„ÇíÊåáÂÆö

    if (!db.open()) {
        QMessageBox::critical(this, "Database Error", "Failed to open database: " + db.lastError().text());
        return;
    }

    // üîΩ „Åì„Åì„ÅßÊé•Á∂öÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åô„Çã üîΩ
    if (!QSqlDatabase::database().isOpen()) {
        QMessageBox::critical(this, "Database Error", "Database connection is not open.");
        return;
    }

    QSqlQuery query;
    query.exec("CREATE TABLE IF NOT EXISTS tasks ("
               "id INTEGER PRIMARY KEY AUTOINCREMENT, "
               "taskText TEXT, "
               "deadline TEXT, "
               "tagText TEXT)");

    qDebug() << "Database initialized successfully.";
}


void MainWindow::saveTaskToDatabase(const QString &taskText, const QDateTime &deadline, const QString &tagText) {
    if (!QSqlDatabase::database().isOpen()) {
        QMessageBox::critical(this, "Database Error", "Database connection is not open.");
        qDebug() << "Database Error: Connection is not open!";
        return;
    }

    qDebug() << "Saving Task:" << taskText << deadline.toString("yyyy/MM/dd HH:mm") << tagText;

    QSqlQuery query;
    query.prepare("INSERT INTO tasks (taskText, deadline, tagText) VALUES (:taskText, :deadline, :tagText)");
    query.bindValue(":taskText", taskText);
    query.bindValue(":deadline", deadline.toString("yyyy/MM/dd HH:mm"));
    query.bindValue(":tagText", tagText);

    if (!query.exec()) {
        QMessageBox::critical(this, "Database Error", "Failed to save task: " + query.lastError().text());
        qDebug() << "SQL Error:" << query.lastError().text();
    } else {
        qDebug() << "Task saved successfully!";
    }
}

void MainWindow::updateTaskList() {

    // üîπ tagFilterComboBox „ÅÆ nullptr „ÉÅ„Çß„ÉÉ„ÇØ
    if (!tagFilterComboBox) {
        qDebug() << "tagFilterComboBox „Åå nullptr „Åß„Åô";
        return;
    }

    QString selectedTag = tagFilterComboBox->currentText();

    QString queryStr = "SELECT * FROM tasks";
    QSqlQuery query;

    if (selectedTag != "„Åô„Åπ„Å¶„ÅÆ„Çø„Ç∞" && !selectedTag.isEmpty()) {
        queryStr += " WHERE tagText = :tag";
        query.prepare(queryStr);
        query.bindValue(":tag", selectedTag);
    } else {
        query.prepare(queryStr);
    }

    if (!query.exec()) {
        qDebug() << "„ÇØ„Ç®„É™„ÅÆÂÆüË°å„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:" << query.lastError().text();
        return;
    }

    // üîπ „ÇØ„Ç®„É™„Å´„Éá„Éº„Çø„Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç
    if (!query.next()) {
        qDebug() << "„Çø„Çπ„ÇØ„Åå„Éá„Éº„Çø„Éô„Éº„Çπ„Å´Â≠òÂú®„Åó„Åæ„Åõ„Çì„ÄÇ";
        return;
    }
    query.previous();  // ÊúÄÂàù„ÅÆ„É¨„Ç≥„Éº„Éâ„Å´Êàª„Åô

    // üîπ ÈÅéÂéª„ÅÆ„É™„Çπ„Éà„Çí„ÇØ„É™„Ç¢
    while (QLayoutItem *child = taskListLayout->takeAt(0)) {
        if (child->widget()) {
            qDebug() << "ÂâäÈô§: " << child->widget()->objectName();  // Á¢∫Ë™çÁî®„É≠„Ç∞

            child->widget()->deleteLater();
        }
        delete child;
    }

    while (query.next()) {
        int taskId = query.value("id").toInt();
        QString taskName = query.value("taskText").toString();
        QString taskTag = query.value("tagText").toString();
        QDateTime taskDeadline = query.value("deadline").toDateTime();
        bool isCompleted = query.value("is_completed").toBool();
        QString deadlineStr = taskDeadline.toString("yyyy-MM-dd HH:mm");

        qDebug() << "ÂèñÂæó„Åó„Åü„Çø„Çπ„ÇØ: " << taskName << " (" << taskTag << "), ÊúüÈôê: " << deadlineStr;

        QLabel *taskLabel = new QLabel(taskName + " (" + taskTag + ") ÊúüÈôê: " + deadlineStr, this);
        QPushButton *editButton = new QPushButton("Á∑®ÈõÜ");
        QPushButton *deleteButton = new QPushButton("ÂâäÈô§");
        QPushButton *completeButton = new QPushButton("ÂÆå‰∫Ü", this);

        if (taskDeadline < QDateTime::currentDateTime()) {
            taskLabel->setStyleSheet("color: red; font-weight: bold;");
        }

        QWidget *taskRow = new QWidget(this);
        QHBoxLayout *taskLayout = new QHBoxLayout(taskRow);
        taskLayout->addWidget(taskLabel);
        taskLayout->addWidget(editButton);
        taskLayout->addWidget(deleteButton);
        taskLayout->addWidget(completeButton);
        taskRow->setLayout(taskLayout);

        taskListLayout->addWidget(taskRow);

        // üîπ ÂÆå‰∫ÜÊ∏à„Åø„Çø„Çπ„ÇØ„ÅÆÂá¶ÁêÜ
        if (isCompleted) {
            taskLabel->setStyleSheet("color: gray; text-decoration: line-through;");
            completeButton->setEnabled(false);
        }

        // üîπ ÂâäÈô§„Éú„Çø„É≥„ÅÆÂãï‰Ωú
        connect(deleteButton, &QPushButton::clicked, this, [this, taskId]() {
            deleteTask(taskId);
        });

        // üîπ Á∑®ÈõÜ„Éú„Çø„É≥„ÅÆÂãï‰Ωú
        connect(editButton, &QPushButton::clicked, this, [this, taskId, taskName, taskTag, deadlineStr]() {
            editTask(taskId, taskName, taskTag, deadlineStr);
        });

        // üîπ ÂÆå‰∫Ü„Éú„Çø„É≥„ÅÆÂãï‰Ωú
        connect(completeButton, &QPushButton::clicked, this, [this, taskId]() {
            QSqlQuery query;
            query.prepare("UPDATE tasks SET is_completed = 1 WHERE id = :id");
            query.bindValue(":id", taskId);
            if (!query.exec()) {
                qDebug() << "„Çø„Çπ„ÇØ„ÅÆÂÆå‰∫Ü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:" << query.lastError().text();
            }
            updateTaskList();
        });
    }

    qDebug() << "updateTaskList() ÂÆå‰∫Ü";
}

void MainWindow::populateTagComboBox()
{
    QSqlQuery query;
    query.exec("SELECT DISTINCT tag FROM tasks");

    // Êó¢Â≠ò„ÅÆ„Çø„Ç∞„Çí„Åô„Åπ„Å¶ËøΩÂä†
    while (query.next()) {
        QString tag = query.value(0).toString();
        tagFilterComboBox->addItem(tag);  // ÂèñÂæó„Åó„Åü„Çø„Ç∞„ÇíËøΩÂä†
    }

    // ‰ªñ„ÅÆÈùôÁöÑ„Å™„Çø„Ç∞Ôºà‰æã„Åà„Å∞„ÄÅ‰∫à„ÇÅÊ±∫„ÇÅ„Çâ„Çå„Åü„Çø„Ç∞Ôºâ
    tagFilterComboBox->addItem("drink");
    tagFilterComboBox->addItem("fruit");
    tagFilterComboBox->addItem("snack");
}
void MainWindow::setupTaskTable()
{
    model = new QSqlTableModel(this);
    model->setTable("tasks");  // „Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆ tasks „ÉÜ„Éº„Éñ„É´„Çí‰ΩøÁî®
    model->setSort(2, Qt::AscendingOrder);  // 2Áï™ÁõÆ„ÅÆ„Ç´„É©„É†ÔºàdeadlineÔºâ„ÅßÊòáÈ†Ü„ÇΩ„Éº„Éà
    model->select();  // „Éá„Éº„Çø„ÇíÂèñÂæó

    // QTableView„Çí‰ΩúÊàê
    tableView = new QTableView(this);
    tableView->setModel(model);
    tableView->setSortingEnabled(true);  // „Éò„ÉÉ„ÉÄ„Éº„ÇØ„É™„ÉÉ„ÇØ„Åß‰∏¶„Å≥Êõø„ÅàÂèØËÉΩ

    // „É¨„Ç§„Ç¢„Ç¶„Éà„Å´ËøΩÂä†
    mainLayout->addWidget(tableView);
}

void MainWindow::sortTaskList(const QString &sortOption)
{
    // ‰∏¶„Å≥Êõø„ÅàÂü∫Ê∫ñ„ÇíÊ±∫ÂÆö
    if (sortOption == "„Çø„Çπ„ÇØÂêç„Åß‰∏¶„Å≥Êõø„Åà") {
        model->setSort(1, Qt::AscendingOrder);  // taskTextÔºà1Áï™ÁõÆ„ÅÆ„Ç´„É©„É†Ôºâ
    } else if (sortOption == "Á∑†ÂàáÊó•„Åß‰∏¶„Å≥Êõø„Åà") {
        model->setSort(2, Qt::AscendingOrder);  // deadlineÔºà2Áï™ÁõÆ„ÅÆ„Ç´„É©„É†Ôºâ
    } else if (sortOption == "„Çø„Ç∞„Åß‰∏¶„Å≥Êõø„Åà") {
        model->setSort(3, Qt::AscendingOrder);  // tagTextÔºà3Áï™ÁõÆ„ÅÆ„Ç´„É©„É†Ôºâ
    }

    model->select(); // „Éá„Éº„Çø„ÇíÂèñÂæó„ÅóÁõ¥„Åô

    // **„É™„Çπ„Éà„Çí„ÇØ„É™„Ç¢**
    while (QLayoutItem *child = taskListLayout->takeAt(0)) {
        if (child->widget()) {
            child->widget()->deleteLater();
        }
        delete child;
    }
    QSqlQuery query;
    query.exec("SELECT DISTINCT tag FROM tasks");

    // **‰∏¶„Å≥Êõø„ÅàÂæå„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó„Åó„Å¶„É™„Çπ„Éà„ÇíÂÜçÊèèÁîª**

    for (int row = 0; row < model->rowCount(); ++row) {
        int taskId = model->index(row, 0).data().toInt();  // id (0Áï™ÁõÆ„ÅÆ„Ç´„É©„É†)
        QString taskName = model->index(row, 1).data().toString();  // taskText
        QString taskDeadline = model->index(row, 2).data().toString();  // deadline
        QString taskTag = model->index(row, 3).data().toString();  // tagText
        bool isCompleted = model->index(row, 4).data().toBool(); // ÂÆå‰∫ÜÁä∂ÊÖã„ÇíÂèñÂæó

        QLabel *taskLabel = new QLabel(taskName + " (" + taskTag + " - " + taskDeadline + ")", this);


        // ÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Çã„Çø„Çπ„ÇØ„Å´„ÅØ„Çπ„Çø„Ç§„É´„ÇíÈÅ©Áî®
        if (isCompleted) {
            taskLabel->setStyleSheet("color: grey; text-decoration: line-through;");
        }
        // Á∑†ÂàáÊó•„ÅåÈÅé„Åé„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØËµ§Ëâ≤„ÅßÂ§™Â≠ó„Å´
        QDateTime deadlineDateTime = QDateTime::fromString(taskDeadline, "yyyy-MM-dd HH:mm");
        if (deadlineDateTime < QDateTime::currentDateTime()) {
            taskLabel->setStyleSheet("color: red; font-weight: bold;");
        }
        // ÂÆå‰∫Ü„Éú„Çø„É≥„Çí‰ΩúÊàê
        QPushButton *completeButton = new QPushButton(isCompleted ? "Êú™ÂÆå‰∫Ü" : "ÂÆå‰∫Ü", this);
        connect(completeButton, &QPushButton::clicked, this, [this, taskId, isCompleted]() {
            QSqlQuery query;
            query.prepare("UPDATE tasks SET is_completed = :isCompleted WHERE id = :id");
            query.bindValue(":id", taskId);
            query.bindValue(":isCompleted", !isCompleted);  // ÂÆå‰∫ÜÁä∂ÊÖã„ÇíÂàá„ÇäÊõø„Åà
            if (!query.exec()) {
                qDebug() << "„Çø„Çπ„ÇØ„ÅÆÂÆå‰∫Ü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:" << query.lastError().text();
            }
            updateTaskList();
        });

        // ÂâäÈô§„Éú„Çø„É≥„Çí‰ΩúÊàê
        QPushButton *deleteButton = new QPushButton("ÂâäÈô§", this);
        connect(deleteButton, &QPushButton::clicked, this, [this, taskId]() {
            deleteTask(taskId);
        });

        // Â§âÊõ¥„Éú„Çø„É≥„Çí‰ΩúÊàê
        QPushButton *editButton = new QPushButton("Â§âÊõ¥", this);
        connect(editButton, &QPushButton::clicked, this, [this, taskId, taskName, taskTag, taskDeadline]() {
            editTask(taskId, taskName, taskTag, taskDeadline);
        });

        // „Çø„Çπ„ÇØ„É©„Éô„É´„Å®„Éú„Çø„É≥„Çí„É¨„Ç§„Ç¢„Ç¶„Éà„Å´ËøΩÂä†
        QHBoxLayout *taskLayout = new QHBoxLayout();
        taskLayout->addWidget(taskLabel);
        taskLayout->addWidget(completeButton);
        taskLayout->addWidget(deleteButton);
        taskLayout->addWidget(editButton);
        QWidget *taskWidget = new QWidget(this);
        taskWidget->setLayout(taskLayout);
        taskListLayout->addWidget(taskWidget);  // Êñ∞„Åó„ÅÑÈ†ÜÂ∫è„Åß„É™„Çπ„Éà„Çí‰ΩúÊàê

    }

    // QTableView„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åã„ÇíÁ¢∫Ë™ç
    if (tableView) {
        tableView->setVisible(false);  // „ÇÇ„ÅóQTableView„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÅÈùûË°®Á§∫„Å´„Åô„Çã
    }
}




void MainWindow::loadTasksFromDatabase() {
    QSqlDatabase db = QSqlDatabase::database();
    if (!db.isOpen()) {
        qDebug() << "Database is not open!";
        return;
    }

    QSqlQuery query;
    if (!query.exec("SELECT id, taskText, tagText, deadline FROM tasks")) {
        qDebug() << "Failed to load tasks:" << query.lastError().text();
        return;
    }

    while (query.next()) {
        int id = query.value(0).toInt();
        QString taskText = query.value(1).toString();
        QString tagText = query.value(2).toString();
        QDateTime deadline = query.value(3).toDateTime();


        QWidget *taskRow = new QWidget(this);
        QHBoxLayout *taskLayout = new QHBoxLayout(taskRow);

        QLabel *taskLabel = new QLabel(taskText + " (ÊúüÈôê: " + deadline.toString("yyyy/MM/dd HH:mm") + ")", this);
        QLabel *tagLabel = new QLabel(tagText.isEmpty() ? "„Å™„Åó" : tagText, this);

        tagLabel->setStyleSheet("color: #888; font-size: 12px;");

        QPushButton *editTaskButton = new QPushButton("Â§âÊõ¥", this);
        QPushButton *deleteTaskButton = new QPushButton("ÂâäÈô§", this);

        taskLayout->addWidget(taskLabel);
        taskLayout->addWidget(tagLabel);
        taskLayout->addWidget(editTaskButton);
        taskLayout->addWidget(deleteTaskButton);
        taskRow->setLayout(taskLayout);

        taskListLayout->addWidget(taskRow);
        taskList.append(Task(taskLabel, deadline, tagText));
        taskRow->update();
        update();  // üî¥ UI„ÅÆÊõ¥Êñ∞„ÇíË©¶„Åô

        // Á∑®ÈõÜ„ÉªÂâäÈô§„Éú„Çø„É≥„ÅÆÂá¶ÁêÜ
        QString deadlineStr = deadline.toString("yyyy-MM-dd HH:mm:ss");  // QDateTime ‚Üí QString „Å´Â§âÊèõ

        connect(editTaskButton, &QPushButton::clicked, this, [this,id, taskText, tagText, deadlineStr]() {
            editTask(id, taskText, tagText, deadlineStr);
        });

        connect(deleteTaskButton, &QPushButton::clicked, this, [this, id]() {
            deleteTask(id);
        });
    }



    query.finish();
    qDebug() << "Finished loading tasks.";
}
